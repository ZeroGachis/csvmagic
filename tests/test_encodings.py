from unittest import TestCase

from magicparse import Schema


class TestCsvEncoding(TestCase):
    def test_default_encoding(self):
        schema = Schema.build(
            {
                "file_type": "csv",
                "fields": [{"key": "name", "type": "str", "column-number": 1}],
            }
        )

        rows, errors = schema.parse("Jos√©\nÊùé\nüí©\n".encode("utf-8"))

        assert len(errors) == 0
        assert rows == [{"name": "Jos√©"}, {"name": "Êùé"}, {"name": "üí©"}]

    def test_exotic_encoding(self):
        schema = Schema.build(
            {
                "file_type": "csv",
                "encoding": "iso8859_5",
                "fields": [{"key": "name", "type": "str", "column-number": 1}],
            }
        )

        rows, errors = schema.parse(
            "–î–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–µ—Ç –í–ª–∞–¥–∏–º–∏—Ä –ø—Ä–æ–∫–ª—è—Ç—ã–π\n"
            "–î–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–µ—Ç –ö–∞—Ä–ª –ú–∞—Ä–∫—Å\n"
            "–î–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–µ—Ç –†–æ—Å—Å–∏—è\n".encode("iso8859_5")
        )

        assert len(errors) == 0
        assert rows == [
            {"name": "–î–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–µ—Ç –í–ª–∞–¥–∏–º–∏—Ä –ø—Ä–æ–∫–ª—è—Ç—ã–π"},
            {"name": "–î–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–µ—Ç –ö–∞—Ä–ª –ú–∞—Ä–∫—Å"},
            {"name": "–î–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–µ—Ç –†–æ—Å—Å–∏—è"},
        ]


class TestExoticEncoding(TestCase):
    def test_default_encoding(self):
        schema = Schema.build(
            {
                "file_type": "columnar",
                "fields": [
                    {
                        "key": "name",
                        "type": "str",
                        "column-start": 0,
                        "column-length": 4,
                    }
                ],
            }
        )

        rows, errors = schema.parse("Jos√©\nÊùé   \nüí©   \n".encode("utf-8"))

        assert len(errors) == 0
        assert rows == [{"name": "Jos√©"}, {"name": "Êùé   "}, {"name": "üí©   "}]

    def test_exotic_encoding(self):
        schema = Schema.build(
            {
                "file_type": "columnar",
                "encoding": "iso8859_5",
                "fields": [
                    {
                        "key": "name",
                        "type": "str",
                        "column-start": 0,
                        "column-length": 33,
                    }
                ],
            }
        )

        rows, errors = schema.parse(
            "–î–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–µ—Ç –í–ª–∞–¥–∏–º–∏—Ä –ø—Ä–æ–∫–ª—è—Ç—ã–π\n"
            "–î–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–µ—Ç –ö–∞—Ä–ª –ú–∞—Ä–∫—Å        \n"
            "–î–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–µ—Ç –†–æ—Å—Å–∏—è            \n".encode("iso8859_5")
        )

        assert len(errors) == 0
        assert rows == [
            {"name": "–î–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–µ—Ç –í–ª–∞–¥–∏–º–∏—Ä –ø—Ä–æ–∫–ª—è—Ç—ã–π"},
            {"name": "–î–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–µ—Ç –ö–∞—Ä–ª –ú–∞—Ä–∫—Å        "},
            {"name": "–î–∞ –∑–¥—Ä–∞–≤—Å—Ç–≤—É–µ—Ç –†–æ—Å—Å–∏—è            "},
        ]
